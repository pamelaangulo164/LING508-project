from __future__ import annotations
from abc import ABC, abstractmethod
from uuid import UUID
from typing import Optional, List

from models import EnglishTerm, SpanishTerm, Meaning, Example

class Repository(ABC):
    @abstractmethod
    def bootstrap_if_needed(self) -> None: ...
    @abstractmethod
    def clear_all_data(self) -> None: ...

    @abstractmethod
    def insert_english_term(self, term: EnglishTerm) -> None: ...
    @abstractmethod
    def insert_spanish_term(self, term: SpanishTerm) -> None: ...
    @abstractmethod
    def insert_meaning(self, meaning: Meaning) -> None: ...
    @abstractmethod
    def insert_example(self, example: Example) -> None: ...

    @abstractmethod
    def link_meaning_english(self, meaning_id: UUID, english_term_id: UUID) -> None: ...
    @abstractmethod
    def link_meaning_spanish(self, meaning_id: UUID, spanish_term_id: UUID) -> None: ...

    @abstractmethod
    def load_english_term(self, lemma: str) -> Optional[EnglishTerm]: ...
    @abstractmethod
    def get_meaning(self, meaning_id: UUID) -> Optional[Meaning]: ...
    @abstractmethod
    def get_spanish_term(self, term_id: UUID) -> Optional[SpanishTerm]: ...
    @abstractmethod
    def get_example(self, example_id: UUID) -> Optional[Example]: ...
    @abstractmethod
    def load_meanings_for_english(self, lemma: str) -> List[Meaning]: ...
